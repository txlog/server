#!/bin/bash
#
# LDAP Discovery Script
# Script auxiliar para descobrir filtros LDAP
#
# Uso: ./ldap-discovery.sh
#

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${BLUE}‚ïë     LDAP Discovery Script - Txlog Server          ‚ïë${NC}"
echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""

# Verificar se ldapsearch est√° instalado
if ! command -v ldapsearch &> /dev/null; then
    echo -e "${RED}‚ùå ldapsearch n√£o encontrado!${NC}"
    echo ""
    echo "Instale o pacote ldap-utils:"
    echo "  - Debian/Ubuntu: sudo apt-get install ldap-utils"
    echo "  - Red Hat/CentOS: sudo yum install openldap-clients"
    echo "  - Mac: brew install openldap"
    echo ""
    exit 1
fi

# Coletar informa√ß√µes do servidor LDAP
echo -e "${YELLOW}üìù Configura√ß√£o do Servidor LDAP${NC}"
echo ""

read -p "Host do servidor LDAP (ex: ldap.exemplo.com): " LDAP_HOST
read -p "Porta (389 para LDAP, 636 para LDAPS) [389]: " LDAP_PORT
LDAP_PORT=${LDAP_PORT:-389}

read -p "Usar TLS/LDAPS? (s/n) [n]: " USE_TLS
USE_TLS=${USE_TLS:-n}

if [[ $USE_TLS == "s" || $USE_TLS == "S" ]]; then
    LDAP_URL="ldaps://${LDAP_HOST}:${LDAP_PORT}"
else
    LDAP_URL="ldap://${LDAP_HOST}:${LDAP_PORT}"
fi

read -p "Base DN (ex: dc=exemplo,dc=com): " BASE_DN
read -p "Bind DN (ex: cn=admin,dc=exemplo,dc=com): " BIND_DN
read -s -p "Senha do Bind DN: " BIND_PASSWORD
echo ""
echo ""

# Testar conex√£o
echo -e "${YELLOW}üîç Testando conex√£o...${NC}"
if ldapsearch -H "$LDAP_URL" -x -b "$BASE_DN" -D "$BIND_DN" -w "$BIND_PASSWORD" -s base "(objectClass=*)" dn &> /dev/null; then
    echo -e "${GREEN}‚úÖ Conex√£o bem-sucedida!${NC}"
else
    echo -e "${RED}‚ùå Falha na conex√£o. Verifique as credenciais.${NC}"
    exit 1
fi
echo ""

# Menu principal
while true; do
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë                 Menu Principal                    ‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo "1) Explorar estrutura do diret√≥rio"
    echo "2) Buscar usu√°rios"
    echo "3) Buscar grupos"
    echo "4) Testar filtro de usu√°rio"
    echo "5) Testar filtro de grupo"
    echo "6) Ver configura√ß√£o recomendada"
    echo "0) Sair"
    echo ""
    read -p "Escolha uma op√ß√£o: " option
    echo ""

    case $option in
        1)
            echo -e "${YELLOW}üìÇ Estrutura do Diret√≥rio${NC}"
            echo ""
            echo "OUs (Organizational Units):"
            ldapsearch -H "$LDAP_URL" -x -b "$BASE_DN" -D "$BIND_DN" -w "$BIND_PASSWORD" -LLL "(objectClass=organizationalUnit)" dn | grep "^dn:" | sed 's/^dn: /  - /'
            echo ""
            ;;
        
        2)
            echo -e "${YELLOW}üë• Buscar Usu√°rios${NC}"
            echo ""
            echo "Escolha o tipo de busca:"
            echo "1) Por objectClass=person"
            echo "2) Por objectClass=inetOrgPerson"
            echo "3) Por objectClass=posixAccount"
            echo "4) Por objectClass=user (Active Directory)"
            echo ""
            read -p "Op√ß√£o: " search_type
            
            case $search_type in
                1) filter="(objectClass=person)" ;;
                2) filter="(objectClass=inetOrgPerson)" ;;
                3) filter="(objectClass=posixAccount)" ;;
                4) filter="(objectClass=user)" ;;
                *) echo -e "${RED}Op√ß√£o inv√°lida${NC}"; continue ;;
            esac
            
            echo ""
            echo "Primeiros 5 usu√°rios encontrados:"
            ldapsearch -H "$LDAP_URL" -x -b "$BASE_DN" -D "$BIND_DN" -w "$BIND_PASSWORD" -LLL "$filter" dn uid cn sAMAccountName mail | head -n 30
            echo ""
            
            read -p "Ver detalhes de um usu√°rio espec√≠fico? (s/n): " view_user
            if [[ $view_user == "s" || $view_user == "S" ]]; then
                read -p "Digite o username/uid: " username
                echo ""
                echo "Tentando buscar com diferentes atributos..."
                
                for attr in uid cn sAMAccountName mail; do
                    echo -e "${BLUE}Buscando com $attr=$username:${NC}"
                    result=$(ldapsearch -H "$LDAP_URL" -x -b "$BASE_DN" -D "$BIND_DN" -w "$BIND_PASSWORD" -LLL "($attr=$username)" 2>/dev/null)
                    if [ ! -z "$result" ]; then
                        echo "$result"
                        echo ""
                        echo -e "${GREEN}‚úÖ Encontrado com filtro: ($attr=%s)${NC}"
                        echo ""
                        break
                    fi
                done
            fi
            ;;
        
        3)
            echo -e "${YELLOW}üë• Buscar Grupos${NC}"
            echo ""
            echo "Escolha o tipo de busca:"
            echo "1) Por objectClass=groupOfNames"
            echo "2) Por objectClass=groupOfUniqueNames"
            echo "3) Por objectClass=posixGroup"
            echo "4) Por objectClass=group (Active Directory)"
            echo ""
            read -p "Op√ß√£o: " search_type
            
            case $search_type in
                1) filter="(objectClass=groupOfNames)" ;;
                2) filter="(objectClass=groupOfUniqueNames)" ;;
                3) filter="(objectClass=posixGroup)" ;;
                4) filter="(objectClass=group)" ;;
                *) echo -e "${RED}Op√ß√£o inv√°lida${NC}"; continue ;;
            esac
            
            echo ""
            echo "Grupos encontrados:"
            ldapsearch -H "$LDAP_URL" -x -b "$BASE_DN" -D "$BIND_DN" -w "$BIND_PASSWORD" -LLL "$filter" dn cn
            echo ""
            
            read -p "Ver detalhes de um grupo espec√≠fico? (s/n): " view_group
            if [[ $view_group == "s" || $view_group == "S" ]]; then
                read -p "Digite o CN do grupo: " groupname
                echo ""
                ldapsearch -H "$LDAP_URL" -x -b "$BASE_DN" -D "$BIND_DN" -w "$BIND_PASSWORD" -LLL "(cn=$groupname)" dn cn member uniqueMember memberUid
                echo ""
                
                echo -e "${BLUE}Identificando tipo de atributo de membro:${NC}"
                result=$(ldapsearch -H "$LDAP_URL" -x -b "$BASE_DN" -D "$BIND_DN" -w "$BIND_PASSWORD" -LLL "(cn=$groupname)" member uniqueMember memberUid 2>/dev/null)
                
                if echo "$result" | grep -q "^member:"; then
                    echo -e "${GREEN}‚úÖ Usa 'member' - Filtro recomendado: (member=%s)${NC}"
                elif echo "$result" | grep -q "^uniqueMember:"; then
                    echo -e "${GREEN}‚úÖ Usa 'uniqueMember' - Filtro recomendado: (uniqueMember=%s)${NC}"
                elif echo "$result" | grep -q "^memberUid:"; then
                    echo -e "${GREEN}‚úÖ Usa 'memberUid' - Filtro recomendado: (memberUid=%s)${NC}"
                    echo -e "${YELLOW}‚ö†Ô∏è  Aten√ß√£o: memberUid usa apenas o uid, n√£o o DN completo${NC}"
                fi
                echo ""
            fi
            ;;
        
        4)
            echo -e "${YELLOW}üß™ Testar Filtro de Usu√°rio${NC}"
            echo ""
            echo "Filtros comuns:"
            echo "  (uid=%s)                - OpenLDAP, FreeIPA"
            echo "  (sAMAccountName=%s)     - Active Directory"
            echo "  (cn=%s)                 - Sistemas antigos"
            echo "  (mail=%s)               - Login por email"
            echo ""
            read -p "Digite o filtro (ex: (uid=%s)): " user_filter
            read -p "Digite um username para testar: " test_user
            
            test_filter=$(echo "$user_filter" | sed "s/%s/$test_user/")
            echo ""
            echo -e "${BLUE}Testando filtro: $test_filter${NC}"
            
            error_output=$(mktemp)
            result=$(ldapsearch -H "$LDAP_URL" -x -b "$BASE_DN" -D "$BIND_DN" -w "$BIND_PASSWORD" -LLL "$test_filter" 2>"$error_output")
            exit_code=$?
            
            if [ $exit_code -ne 0 ]; then
                echo -e "${RED}‚ùå Erro ao executar ldapsearch:${NC}"
                cat "$error_output"
                rm -f "$error_output"
            elif [ ! -z "$result" ]; then
                echo "$result"
                echo ""
                count=$(echo "$result" | grep -c "^dn:" || true)
                if [ "$count" -eq 1 ]; then
                    echo -e "${GREEN}‚úÖ Filtro OK! Encontrou exatamente 1 usu√°rio.${NC}"
                elif [ "$count" -gt 1 ]; then
                    echo -e "${YELLOW}‚ö†Ô∏è  Filtro encontrou $count usu√°rios. Deve retornar apenas 1!${NC}"
                else
                    echo -e "${RED}‚ùå Nenhum usu√°rio encontrado.${NC}"
                fi
                rm -f "$error_output"
            else
                echo -e "${RED}‚ùå Nenhum usu√°rio encontrado.${NC}"
                rm -f "$error_output"
            fi
            echo ""
            ;;
        
        5)
            echo -e "${YELLOW}üß™ Testar Filtro de Grupo${NC}"
            echo ""
            echo "Filtros comuns:"
            echo "  (member=%s)        - groupOfNames, Active Directory"
            echo "  (uniqueMember=%s)  - groupOfUniqueNames"
            echo "  (memberUid=%s)     - posixGroup (usa s√≥ uid, n√£o DN)"
            echo ""
            read -p "Digite o filtro (ex: (member=%s)): " group_filter
            read -p "Digite o DN do grupo para testar: " test_group_dn
            read -p "Digite o DN do usu√°rio: " test_user_dn
            
            test_filter=$(echo "$group_filter" | sed "s/%s/$test_user_dn/")
            echo ""
            echo -e "${BLUE}Testando se usu√°rio pertence ao grupo...${NC}"
            echo -e "${BLUE}Grupo: $test_group_dn${NC}"
            echo -e "${BLUE}Filtro: $test_filter${NC}"
            
            error_output=$(mktemp)
            result=$(ldapsearch -H "$LDAP_URL" -x -b "$test_group_dn" -D "$BIND_DN" -w "$BIND_PASSWORD" -s base -LLL "$test_filter" dn 2>"$error_output")
            exit_code=$?
            
            if [ $exit_code -ne 0 ]; then
                echo -e "${RED}‚ùå Erro ao executar ldapsearch:${NC}"
                cat "$error_output"
                rm -f "$error_output"
            elif [ ! -z "$result" ]; then
                echo "$result"
                echo ""
                echo -e "${GREEN}‚úÖ Usu√°rio √© membro do grupo!${NC}"
                rm -f "$error_output"
            else
                echo -e "${RED}‚ùå Usu√°rio N√ÉO √© membro do grupo, ou filtro incorreto.${NC}"
                rm -f "$error_output"
            fi
            echo ""
            ;;
        
        6)
            echo -e "${YELLOW}üìã Configura√ß√£o Recomendada${NC}"
            echo ""
            echo "Com base nas informa√ß√µes coletadas, adicione ao seu .env:"
            echo ""
            echo "LDAP_HOST=$LDAP_HOST"
            echo "LDAP_PORT=$LDAP_PORT"
            if [[ $USE_TLS == "s" || $USE_TLS == "S" ]]; then
                echo "LDAP_USE_TLS=true"
            else
                echo "LDAP_USE_TLS=false"
            fi
            echo "LDAP_BASE_DN=$BASE_DN"
            echo "LDAP_BIND_DN=$BIND_DN"
            echo "LDAP_BIND_PASSWORD=sua_senha_aqui"
            echo ""
            echo "# Descubra estes valores usando as op√ß√µes 2, 3, 4 e 5 do menu:"
            echo "LDAP_USER_FILTER=(uid=%s)           # ou (sAMAccountName=%s) para AD"
            echo "LDAP_GROUP_FILTER=(member=%s)       # ou (uniqueMember=%s) ou (memberUid=%s)"
            echo "LDAP_ADMIN_GROUP=cn=admins,ou=groups,$BASE_DN"
            echo "LDAP_VIEWER_GROUP=cn=viewers,ou=groups,$BASE_DN"
            echo ""
            ;;
        
        0)
            echo -e "${GREEN}üëã At√© logo!${NC}"
            exit 0
            ;;
        
        *)
            echo -e "${RED}Op√ß√£o inv√°lida!${NC}"
            ;;
    esac
    
    read -p "Pressione ENTER para continuar..."
    echo ""
done
